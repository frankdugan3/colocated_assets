defmodule ColocatedAssets.RegistryTest do
  alias Hex.Solver.Registry
  alias Hex.Solver.Registry
  use ExUnit.Case, async: true
  doctest ColocatedAssets.Registry, import: true

  defmodule Components do
    use ColocatedAssets

    assign_colocated_eex :colors, ["red", "yellow", "green"]
    @sizes [{"sm", ".25rem"}, {"lg", ".5rem"}, {"xl", ".75rem"}]
    assign_colocated_eex :sizes, @sizes

    ~CSSEEX"""
    <%= for color <- @colors do %>.is-<%= color %> {
      --base-color: var(--color-<%= color %>-500);
    }
    <% end %><%= for {key, space} <- @sizes do %>.is-<%= key %> {
      padding: <%= space %>;
    }
    <% end %>
    """

    ~CSS"""
    .badge {
      background: var(--base-color);
      color: black;
    }
    """

    ~HOOK"""
    export const BadgeHook = {
      mounted() {
        console.log("Hello, world!");
      },
    };
    """
  end

  defmodule Registry do
    use ColocatedAssets.Registry, extract_modules: [Components]
  end

  test "assets are properly extracted" do
    assert File.read!(ColocatedAssets.Registry.css_file(Registry)) == """
           /* WARNING: THIS FILE WAS AUTOMATICALLY GENERATED BY EXTRACTING ~CSS and ~CSSEEX. */
           .badge {
             background: var(--base-color);
             color: black;
           }
           .is-red {
             --base-color: var(--color-red-500);
           }
           .is-yellow {
             --base-color: var(--color-yellow-500);
           }
           .is-green {
             --base-color: var(--color-green-500);
           }
           .is-sm {
             padding: .25rem;
           }
           .is-lg {
             padding: .5rem;
           }
           .is-xl {
             padding: .75rem;
           }
           """

    assert File.read!(ColocatedAssets.Registry.hooks_file(Registry)) == """
           /* WARNING: THIS FILE WAS AUTOMATICALLY GENERATED BY EXTRACTING ~HOOK. */
           export const BadgeHook = {
             mounted() {
               console.log("Hello, world!");
             },
           };
           """
  end
end
