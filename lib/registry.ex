defmodule ColocatedAssets.Registry do
  @moduledoc """
  Extract CSS and JS Hooks from modules by adding them to a registry:

  ```elixir
  defmodule MyAppWeb.ColocatedAssets do
    use ColocatedAssets.Registry,
      extract_modules: [
        MyAppWeb.CoreComponents
      ]
  end
  ```

  - Content from all modules `~CSS` and `~CSSEEX` sigils will be compiled/extracted into `assets/css/[registry module].css`.
  - Content from all modules `~HOOK` sigils will be extracted into `assets/js/hook/[registry module]_hooks.js`

  You can then import them into your `app.css` and `app.js` files.

  ```css
  @import './colocated_assets.css';
  ```

  ```js
  import * as ColocatedHooks './colocated_assets.css';

  // ...
  hooks: {
    AnotherHook,
    ...ColocatedHooks
  }
  ```
  """

  @doc false
  defmacro __using__(opts) do
    extract_modules =
      opts[:extract_modules] ||
        raise """
        Must provide "extract_modules" list.
        """

    Module.register_attribute(__CALLER__.module, :__colocated_assets_css__, accumulate: true)

    Module.register_attribute(__CALLER__.module, :__colocated_assets_css_assigns__,
      accumulate: true
    )

    Module.register_attribute(__CALLER__.module, :__colocated_assets_hooks__, accumulate: true)

    for module <- extract_modules do
      Module.put_attribute(__CALLER__.module, :before_compile, Macro.expand(module, __CALLER__))
    end

    quote do
      @before_compile unquote(__MODULE__)
    end
  end

  defmacro __before_compile__(env) do
    ColocatedAssets.Registry.write_css(env.module, env.file)
    ColocatedAssets.Registry.write_hooks(env.module, env.file)
  end

  def write_css(module, file) do
    css_file = css_file(module)
    File.mkdir_p!(Path.dirname(css_file))

    assigns =
      module
      |> Module.get_attribute(:__colocated_assets_css_assigns__, [])
      |> List.flatten()

    File.write!(css_file, """
    /*
      WARNING: THIS FILE WAS AUTOMATICALLY GENERATED BY EXTRACTING ~CSS. DO NOT EDIT DIRECTLY.
      INSTEAD, EDIT #{shorten_path(file)}.
    */

    #{Enum.map_join(Module.get_attribute(module, :__colocated_assets_css__, []), "\n", fn
      [eex: template] -> EEx.eval_string(template, assigns, trim: true)
      css -> css
    end)}
    """)
  end

  def write_hooks(module, file) do
    hooks_file = hooks_file(module)
    File.mkdir_p!(Path.dirname(hooks_file))

    File.write!(hooks_file, """
    /*
      WARNING: THIS FILE WAS AUTOMATICALLY GENERATED BY EXTRACTING ~HOOK. DO NOT EDIT DIRECTLY.
      INSTEAD, EDIT #{shorten_path(file)}.
    */

    #{Enum.join(Module.get_attribute(module, :__colocated_assets_hooks__, []), "\n")}
    """)
  end

  defp assets_path() do
    Mix.Project.project_file()
    |> Path.dirname()
    |> Path.join("assets")
  end

  defp filename(module) do
    module
    |> Module.split()
    |> List.last()
    |> Macro.underscore()
    |> String.replace("/", "_")
  end

  defp css_file(module) do
    Path.join(assets_path(), "css/#{filename(module)}.css")
  end

  defp hooks_file(module) do
    Path.join(assets_path(), "js/hooks/#{filename(module)}_hooks.js")
  end

  defp shorten_path(full_path) do
    project_dir =
      Mix.Project.project_file()
      |> Path.dirname()

    Path.relative_to(full_path, project_dir)
  end
end
